server {
        listen  80;
        listen [::]:80;
        server_name buildbot.meshwith.me;

        return 301 https://$host$request_uri;
}
server {
        listen 443      ssl     spdy    default_server;
        listen [::]:443 ssl     spdy    default_server;

        server_name buildbot.meshwith.me;
        root /var/www/html;

        location /cjdns/ {
                proxy_pass              http://127.0.0.1:8010/;
                proxy_set_header        Remote-User     $ssl_client_s_dn;
                proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /cjdns/sse/ {
            proxy_buffering off;
            proxy_pass http://127.0.0.1:8010/sse/;
        }

        location /cjdns/ws {
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
              proxy_pass http://127.0.0.1:8010/ws;
              # raise the proxy timeout for the websocket
              proxy_read_timeout 6000s;
        }

        location / {
                autoindex on;
        }

        add_header "Content-Security-Policy-Report-Only" "default-src 'self'; script-src 'self'; report-uri https://seattlemeshnet.report-uri.io/r/default/csp/reportOnly;";
        ssl_certificate /root/.acme.sh/buildbot.meshwith.me/fullchain.cer;
        ssl_certificate_key /root/.acme.sh/buildbot.meshwith.me/buildbot.meshwith.me.key;
        ssl_trusted_certificate /root/.acme.sh/buildbot.meshwith.me/ca.cer;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;


        # modern configuration. tweak to your needs.
        ssl_protocols TLSv1.2;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
        ssl_prefer_server_ciphers on;

        # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
        add_header Strict-Transport-Security max-age=15768000;

        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8;
}
